<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('../partials/head') %>
  <script src="https://aframe.io/releases/1.3.0/aframe.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.4.0/socket.io.slim.js"></script>
  <script src="/easyrtc/easyrtc.js"></script>
  <script src="../../../static/dist/networked-aframe.js"></script>

  <script src="https://unpkg.com/aframe-randomizer-components@^3.0.1/dist/aframe-randomizer-components.min.js"></script>
  <!--<script src="https://unpkg.com/aframe-particle-system-component@1.0.5/dist/aframe-particle-system-component.min.js"></script>-->
  <script src="https://cdn.jsdelivr.net/gh/IdeaSpaceVR/aframe-particle-system-component@master/dist/aframe-particle-system-component.min.js"></script>
  <script src="../../../static/network-js/spawn-in-circle.component.js"></script>
  <script>
    AFRAME.registerComponent('spawn-in-circle', {
      schema: {
        radius: {type: 'number', default: 1}
      },

      init: function() {
        var el = this.el;
        var center = el.getAttribute('position');

        var angleRad = this.getRandomAngleInRadians();
        var circlePoint = this.randomPointOnCircle(this.data.radius, angleRad);
        var worldPoint = {x: circlePoint.x + center.x, y: center.y, z: circlePoint.y + center.z};
        el.setAttribute('position', worldPoint);

        var angleDeg = angleRad * 180 / Math.PI;
        var angleToCenter = -1 * angleDeg + 90;
        var rotationStr = '0 ' + angleToCenter + ' 0';
        el.setAttribute('rotation', rotationStr);
      },

      getRandomAngleInRadians: function() {
        return Math.random()*Math.PI*2;
      },

      randomPointOnCircle: function (radius, angleRad) {
        x = Math.cos(angleRad)*radius;
        y = Math.sin(angleRad)*radius;
        return {x: x, y: y};
      }
    });
  </script>
</head>

<body>
<header>
  <%- include('../partials/nav') %>
</header>

<section class="section">
  <div class="container has-text-centered">
    <h1 class="title is-1">Multiplayer Game</h1>
    <p>This VR scene supports multiplayer and real time spatial interaction. (currently only works locally)</p>
  </div>
</section>

<style>
  a-scene {
    height: 600px;
    width: 80%;
    left: 50%;
    margin: 0 0 0 -40%;
  }
</style>

<div class="container" id="myEmbeddedScene">
  <a-scene embedded networked-scene="
    room: test-room;
    debug: true;
    adapter: easyrtc;
    ">
    <a-assets>

      <img id="grid" src="https://img.gs/bbdkhfbzkk/stretch/https://i.imgur.com/25P1geh.png" crossorigin="anonymous">
      <img id="sky" src="https://i.imgur.com/WqlqEkq.jpg" crossorigin="anonymous" />

      <!-- Templates -->

      <!-- Avatar -->
      <template id="avatar-template">
        <a-entity class="avatar">
          <a-sphere class="head"
                    scale="0.45 0.5 0.4"
          ></a-sphere>
          <a-entity class="face"
                    position="0 0.05 0"
          >
            <a-sphere class="eye"
                      color="#efefef"
                      position="0.16 0.1 -0.35"
                      scale="0.12 0.12 0.12"
            >
              <a-sphere class="pupil"
                        color="#000"
                        position="0 0 -1"
                        scale="0.2 0.2 0.2"
              ></a-sphere>
            </a-sphere>
            <a-sphere class="eye"
                      color="#efefef"
                      position="-0.16 0.1 -0.35"
                      scale="0.12 0.12 0.12"
            >
              <a-sphere class="pupil"
                        color="#000"
                        position="0 0 -1"
                        scale="0.2 0.2 0.2"
              ></a-sphere>
            </a-sphere>
          </a-entity>
        </a-entity>
      </template>

      <!-- /Templates -->
    </a-assets>

    <a-entity id="player"
              networked="template:#avatar-template;attachTemplateToLocal:false;"
              camera
              position="0 1.6 0"
              spawn-in-circle="radius:3"
              wasd-controls look-controls
    >
      <a-sphere class="head"
                visible="false"
                random-color
      ></a-sphere>
    </a-entity>

    <a-entity position="0 0 0"
              geometry="primitive: plane; width: 10000; height: 10000;" rotation="-90 0 0"
              material="src: #grid; repeat: 10000 10000; transparent: true; metalness:0.6; roughness: 0.4; sphericalEnvMap: #sky;"></a-entity>

    <a-entity light="color: #ccccff; intensity: 1; type: ambient;" visible=""></a-entity>
    <a-entity light="color: #ffaaff; intensity: 1.5" position="5 5 5"></a-entity>

    <a-sky src="#sky" rotation="0 -90 0"></a-sky>
    <a-entity id="particles" particle-system="preset: snow"></a-entity>
    </a-scene>
</div>

</body>

<script>
  // On mobile remove elements that are resource heavy
  var isMobile = AFRAME.utils.device.isMobile();

  if (isMobile) {
    var particles = document.getElementById('particles');
    particles.parentNode.removeChild(particles);
  }
</script>

<script>
  // Define custom schema for syncing avatar color, set by random-color
  NAF.schemas.add({
    template: '#avatar-template',
    components: [
      'position',
      'rotation',
      {
        selector: '.head',
        component: 'material',
        property: 'color'
      }
    ]
  });

  // Called by Networked-Aframe when connected to server
  function onConnect () {
    console.log("onConnect", new Date());
  }
</script>

<script src="https://www.gstatic.com/firebasejs/9.6.4/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.4/firebase-auth-compat.js"></script>

<script>
  window.onload = () => {
    console.log('Running onload')
    const firebaseConfig = {
      apiKey: "AIzaSyBZkmvEZ5tj8GxQmThlmI09Qw1EF4SIdeA",
      authDomain: "startup-systems-4f1d8.firebaseapp.com",
      projectId: "startup-systems-4f1d8",
      storageBucket: "startup-systems-4f1d8.appspot.com",
      messagingSenderId: "477788686794",
      appId: "1:477788686794:web:f7b6b512819f3735576733",
      measurementId: "G-F0RX4MJK6E"
    };

    const app = firebase.initializeApp(firebaseConfig);

    app.auth().setPersistence(firebase.auth.Auth.Persistence.NONE);

    document
            .getElementById("login-form")
            .addEventListener("submit", (event) => {
              event.preventDefault();
              const login = event.target.login.value;
              const password = event.target.password.value;

              // Create a new user using the Firebase SDK for Web
              // Get the users ID token
              // Start a new session with the users ID token
              // Redirect the user to the /dashboard
              firebase.auth().createUserWithEmailAndPassword(login, password)
                      .then((userCredential) => {
                        // Signed in
                        const user = userCredential.user;
                        user.getIdToken().then((idToken) => {
                          //Set a session cookie to retore the user's idToken
                          fetch("/sessionLogin", {
                            method:"POST",
                            headers:{
                              "Content-Type": "application/json"
                            },
                            body: JSON.stringify({
                              idToken: idToken,
                              plan:"free"
                            })
                          }).then((response) => {
                            console.log('success!');
                            window.location.assign('/dashboard')
                          }).catch((err) => {
                            window.location.assign('/sign-in')
                          })
                        })
                      })
                      .catch((error) => {
                        const errorCode = error.code;
                        const errorMessage = error.message;
                      });
              return false;
            });
  };
</script>

</html>